# // // Cоздать функцию которая принимает число и возвращает  текст как в примере:
# //     3275  —>  "3000 + 200 + 70 +5"

def expanded_form(n: int) -> str:
    list: list[str] = []
    l: str = str(n)
    for i in range(len(l)):
        if l[i] == '0':
            pass
        else:
            list.append(l[i] + '0' * (len(l) - 1 - i))
    return str(n)+' -> "'+'+'.join(list)+'"'


print(expanded_form(3725))
print(expanded_form(70030324238))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Дан массив целых чисел, найдите тот, который встречается нечетное количество раз.
# // Всегда будет только одно целое число, которое встречается нечетное количество раз
# //     [1,2,3,4,5,2,4,1,3] -> 5
l = [1, 2, 3, 4, 5, 2, 4, 1, 3]
for i, v in enumerate(l):
    if l.count(v) == 1:
        print(str(l) + ' -> ' + str(v))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Знайти анаграму.
# //     Перевірити чи слово має в собі такі самі літери як і поеперднє слово.
# //
# //     ANAGRAM | MGANRAA -> true
# // EXIT | AXET -> false
# // GOOD | DOGO -> true

w = input('Введите слово:').lower()
an = input('Это анаграмма?').lower()
for i, v in enumerate(w):
    if an.count(v) != w.count(v) or len(an) != len(w):
        t = False
        print(w + ' | ' + an + ' -> ' + str(t))
        break
    elif i == len(w) - 1:
        t = True
        print(w.upper() + ' | ' + an.upper() + ' -> ' + str(t))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Точная степень двойки
# // Дано натуральное число N.
# //     Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае.
# //     Операцией возведения в степень пользоваться нельзя!

n = int(input('Дано натуральное число:'))
while n // 2 > 0:
    if (n % 2) == 1:
        print('NO')
        break
    n /= 2
    if n == 2.0 or n == 1.0:
        print('YES')
        break

# //////////////////////////////////////////////////////////////////////////////////////////////
# //  Сумма цифр числа
# // Дано натуральное число N. Вычислите сумму его цифр.
# //     При решении этой задачи нельзя использовать строки,
# //     списки, массивы ну и циклы, разумеется.
# //     Рекурсія)

n = int(input('Enter number:'))


def numsum(num, s):
    if num == 0:
        return s
    return numsum(num // 10, s + (num % 10))


print(numsum(n, 0))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Палиндром
# Дано слово, состоящее только из строчных латинских букв.
# Проверьте, является ли это слово палиндромом. Выведите YES или NO.
#
# При решении этой задачи нельзя пользоваться циклами,
# в решениях на питоне нельзя использовать срезы с шагом, отличным от 1.

s = input('Enter word:').lower()
inv_s = s[::-1]
if s == inv_s:
    print('YES')
else:
    print('NO')

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Количество единиц
# // Дана последовательность натуральных чисел  в строке, завершающаяся двумя числами 0 подряд.
# // Определите, сколько раз в этой последовательности встречается число 1.
# Числа, идущие после двух нулей, необходимо игнорировать.
# //
# // 2176491947586100 -> 3

seq = input('Enter sequence:')
i = 0
s = 0
while seq[i-1] != '0' and seq[i] != '0':
    if seq[i] == '1':
        s += 1
    i += 1
print(seq + ' -> ' + str(s))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Вирівняти багаторівневий масив в однорівневий
# //     [1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]
# // flat використовувати заборонено.
m = [1, 3, ['Hello', 'Wordd', [9, 6, 1]], ['oops'], 9]
new_m = []
#
#
def inverse(mass):
    for i in mass:
        def inner(k):
            if type(k) != list:
                new_m.append(k)
            else:
                return inverse(k)

        inner(i)
    return new_m


print(str(m) + ' -> ' + str(inverse(m)))

# //////////////////////////////////////////////////////////////////////////////////////////////
# // Знайти набільший елемент в масиві за допомогою reduce
# //     [1,6,9,0,17,88,4,7] -> 88

# from functools import reduce
#
# lis = [1, 6, 9, 0, 17, 88, 4, 7]
# print(reduce(lambda i, j: i if i > j else j, lis))

# //////////////////////////////////////////////////////////////////////////////////////////////
# вивести послідовність Фібоначі, кількість вказана в знінній,
#   наприклад: x = 10 -> 1 1 2 3 5 8 13 21 34 55
#   (число з послідовності - це сума попередніх двох чисел)

l = []
a = 1
b = 1
l.append(str(a))
l.append(str(b))
x = int(input('X='))
for i in range(x - 2):
    l.append(str(a + b))
    c = a
    a = b
    b += c
print('x = ' + str(x) + ' -> ' + ' '.join(l))

# //////////////////////////////////////////////////////////////////////////////////////////////
# порахувати кількість парних і непарних цифр числа,
#   наприклад: х = 225688 -> п = 5, н = 1;
#          х = 33294 -> п = 2, н = 3

num = input('Enter number:')
n = 0
c = 0
for i in num:
    if int(i) % 2 == 0:
        n += 1
    else:
        c += 1
print(f'x = {num} -> п = {n}, н = {c}')

# //////////////////////////////////////////////////////////////////////////////////////////////
# прога, що виводить кількість кожного символа з введеної строки,
# наприклад:
# st = 'as 23 fdfdg544'  # введена строка
#
# 'a' -> 1  # вивело в консолі
# 's' -> 1
# ' ' -> 2
# '2' -> 1
# '3' -> 1
# 'f' -> 2
# 'd' -> 2
# 'g' -> 1
# '5' -> 1
# '4' -> 2

st = input('Enter line:')
for i in set(st):
    print("'"+str(i)+"'"+f' -> {st.count(i)}')

# //////////////////////////////////////////////////////////////////////////////////////////////
# генерируем лист с непарных чисел в порядке возрастания [1,3,5,7,9.....n]
# задача сделать c него лист листов такого плана:
#
# [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]  => [ [1], [3,5], [7,9,11], [13,15,17,19] ]
# [1, 3, 5, 7, 9, 11] => [[1], [3, 5], [7, 9, 11]]l
# [1, 3, 5, 7, 9]  => [ [1], [3,5], [7,9]]
# [1, 3, 5, 7, 9, 11, 13]  => [[1], [3, 5], [7, 9, 11], [13]]
n = int(input('Amount:'))
l = []
k = 1
for i in range(n):
    l.append(k)
    k += 2
print(l)
p = 1
new_l = []
i = 0
while i != len(l) - 1:
    list = []
    while len(list) != p:
        list.append(l[i])
        if i == len(l) - 1:
            new_l.append(list)
            i += 1
            break
        i += 1
    if len(list) > 1 and i == len(l):
        break
    else:
        new_l.append(list)
    if i == len(l) - 1:
        list = []
        list.append(l[i])
        new_l.append(list)
    p += 1
print(new_l)
